{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\adith\\\\WebstormProjects\\\\Expense Tracker and Visualizer ReactJS\\\\src\\\\components\\\\ExpensesChart.js\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from \"react\";\nimport Chart from \"./Chart/Chart\";\n\nvar ExpensesChart = function ExpensesChart(props) {\n  var chartDataPoints = [{\n    label: 'Jan',\n    value: 0\n  }, {\n    label: 'Feb',\n    value: 0\n  }, {\n    label: 'Mar',\n    value: 0\n  }, {\n    label: 'Apr',\n    value: 0\n  }, {\n    label: 'May',\n    value: 0\n  }, {\n    label: 'Jun',\n    value: 0\n  }, {\n    label: 'Jul',\n    value: 0\n  }, {\n    label: 'Aug',\n    value: 0\n  }, {\n    label: 'Sep',\n    value: 0\n  }, {\n    label: 'Oct',\n    value: 0\n  }, {\n    label: 'Nov',\n    value: 0\n  }, {\n    label: 'Dec',\n    value: 0\n  }];\n\n  var _iterator = _createForOfIteratorHelper(props.expenses),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var expense = _step.value;\n      var expenseMonth = expense.date.getMonth();\n      chartDataPoints[expenseMonth].value += expense.amount;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return /*#__PURE__*/React.createElement(Chart, {\n    dataPoints: chartDataPoints,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ExpensesChart;","map":{"version":3,"names":["React","Chart","ExpensesChart","props","chartDataPoints","label","value","expenses","expense","expenseMonth","date","getMonth","amount"],"sources":["C:/Users/adith/WebstormProjects/Expense Tracker and Visualizer ReactJS/src/components/ExpensesChart.js"],"sourcesContent":["import React from \"react\";\r\nimport Chart from \"./Chart/Chart\";\r\n\r\nconst ExpensesChart = (props) => {\r\n\r\n    const chartDataPoints = [\r\n        {label: 'Jan',value: 0},\r\n        {label: 'Feb',value: 0},\r\n        {label: 'Mar',value: 0},\r\n        {label: 'Apr',value: 0},\r\n        {label: 'May',value: 0},\r\n        {label: 'Jun',value: 0},\r\n        {label: 'Jul',value: 0},\r\n        {label: 'Aug',value: 0},\r\n        {label: 'Sep',value: 0},\r\n        {label: 'Oct',value: 0},\r\n        {label: 'Nov',value: 0},\r\n        {label: 'Dec',value: 0}\r\n    ];\r\n\r\n    for (const expense of props.expenses){\r\n        const expenseMonth = expense.date.getMonth();\r\n        chartDataPoints[expenseMonth].value +=expense.amount;\r\n    }\r\n\r\n    return (\r\n        <Chart dataPoints={chartDataPoints} />\r\n    );\r\n}\r\n\r\nexport default ExpensesChart;"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;EAE7B,IAAMC,eAAe,GAAG,CACpB;IAACC,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CADoB,EAEpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAFoB,EAGpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAHoB,EAIpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAJoB,EAKpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CALoB,EAMpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CANoB,EAOpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAPoB,EAQpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CARoB,EASpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAToB,EAUpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAVoB,EAWpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAXoB,EAYpB;IAACD,KAAK,EAAE,KAAR;IAAcC,KAAK,EAAE;EAArB,CAZoB,CAAxB;;EAF6B,2CAiBPH,KAAK,CAACI,QAjBC;EAAA;;EAAA;IAiB7B,oDAAqC;MAAA,IAA1BC,OAA0B;MACjC,IAAMC,YAAY,GAAGD,OAAO,CAACE,IAAR,CAAaC,QAAb,EAArB;MACAP,eAAe,CAACK,YAAD,CAAf,CAA8BH,KAA9B,IAAsCE,OAAO,CAACI,MAA9C;IACH;EApB4B;IAAA;EAAA;IAAA;EAAA;;EAsB7B,oBACI,oBAAC,KAAD;IAAO,UAAU,EAAER,eAAnB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ;AAGH,CAzBD;;AA2BA,eAAeF,aAAf"},"metadata":{},"sourceType":"module"}